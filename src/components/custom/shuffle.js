"use client";

import React, { useEffect, useState } from "react";
import { IconArrowsShuffle } from "@tabler/icons-react";
import useCountryStore from "../../app/useCountryStore";
import IconButton from "./boxbutton";

const countryEmojis = [
  // Yes Im aware this is dumb but it's just a quick shuffle tool for now
  ["Afghanistan", "ðŸ‡¦ðŸ‡«"],
  ["Albania", "ðŸ‡¦ðŸ‡±"],
  ["Algeria", "ðŸ‡©ðŸ‡¿"],
  ["Andorra", "ðŸ‡¦ðŸ‡©"],
  ["Angola", "ðŸ‡¦ðŸ‡´"],
  ["Antigua and Barbuda", "ðŸ‡¦ðŸ‡¬"],
  ["Argentina", "ðŸ‡¦ðŸ‡·"],
  ["Armenia", "ðŸ‡¦ðŸ‡²"],
  ["Australia", "ðŸ‡¦ðŸ‡º"],
  ["Austria", "ðŸ‡¦ðŸ‡¹"],
  ["Azerbaijan", "ðŸ‡¦ðŸ‡¿"],
  ["Bahamas", "ðŸ‡§ðŸ‡¸"],
  ["Bahrain", "ðŸ‡§ðŸ‡­"],
  ["Bangladesh", "ðŸ‡§ðŸ‡©"],
  ["Barbados", "ðŸ‡§ðŸ‡§"],
  ["Belarus", "ðŸ‡§ðŸ‡¾"],
  ["Belgium", "ðŸ‡§ðŸ‡ª"],
  ["Belize", "ðŸ‡§ðŸ‡¿"],
  ["Benin", "ðŸ‡§ðŸ‡¯"],
  ["Bhutan", "ðŸ‡§ðŸ‡¹"],
  ["Bolivia", "ðŸ‡§ðŸ‡´"],
  ["Bosnia and Herzegovina", "ðŸ‡§ðŸ‡¦"],
  ["Botswana", "ðŸ‡§ðŸ‡¼"],
  ["Brazil", "ðŸ‡§ðŸ‡·"],
  ["Brunei", "ðŸ‡§ðŸ‡³"],
  ["Bulgaria", "ðŸ‡§ðŸ‡¬"],
  ["Burkina Faso", "ðŸ‡§ðŸ‡«"],
  ["Burundi", "ðŸ‡§ðŸ‡®"],
  ["Cambodia", "ðŸ‡°ðŸ‡­"],
  ["Cameroon", "ðŸ‡¨ðŸ‡²"],
  ["Canada", "ðŸ‡¨ðŸ‡¦"],
  ["Cape Verde", "ðŸ‡¨ðŸ‡»"],
  ["Central African Republic", "ðŸ‡¨ðŸ‡«"],
  ["Chad", "ðŸ‡¹ðŸ‡©"],
  ["Chile", "ðŸ‡¨ðŸ‡±"],
  ["China", "ðŸ‡¨ðŸ‡³"],
  ["Colombia", "ðŸ‡¨ðŸ‡´"],
  ["Comoros", "ðŸ‡°ðŸ‡²"],
  ["Congo", "ðŸ‡¨ðŸ‡¬"],
  ["Costa Rica", "ðŸ‡¨ðŸ‡·"],
  ["Cote d'Ivoire", "ðŸ‡¨ðŸ‡®"],
  ["Croatia", "ðŸ‡­ðŸ‡·"],
  ["Cuba", "ðŸ‡¨ðŸ‡º"],
  ["Cyprus", "ðŸ‡¨ðŸ‡¾"],
  ["Czechia", "ðŸ‡¨ðŸ‡¿"],
  ["Democratic Republic of Congo", "ðŸ‡¨ðŸ‡©"],
  ["Denmark", "ðŸ‡©ðŸ‡°"],
  ["Djibouti", "ðŸ‡©ðŸ‡¯"],
  ["Dominica", "ðŸ‡©ðŸ‡²"],
  ["Dominican Republic", "ðŸ‡©ðŸ‡´"],
  ["Ecuador", "ðŸ‡ªðŸ‡¨"],
  ["Egypt", "ðŸ‡ªðŸ‡¬"],
  ["El Salvador", "ðŸ‡¸ðŸ‡»"],
  ["Equatorial Guinea", "ðŸ‡¬ðŸ‡¶"],
  ["Eritrea", "ðŸ‡ªðŸ‡·"],
  ["Estonia", "ðŸ‡ªðŸ‡ª"],
  ["Eswatini", "ðŸ‡¸ðŸ‡¿"],
  ["Ethiopia", "ðŸ‡ªðŸ‡¹"],
  ["Fiji", "ðŸ‡«ðŸ‡¯"],
  ["Finland", "ðŸ‡«ðŸ‡®"],
  ["France", "ðŸ‡«ðŸ‡·"],
  ["Gabon", "ðŸ‡¬ðŸ‡¦"],
  ["Gambia", "ðŸ‡¬ðŸ‡²"],
  ["Georgia", "ðŸ‡¬ðŸ‡ª"],
  ["Germany", "ðŸ‡©ðŸ‡ª"],
  ["Ghana", "ðŸ‡¬ðŸ‡­"],
  ["Greece", "ðŸ‡¬ðŸ‡·"],
  ["Greenland", "ðŸ‡¬ðŸ‡±"],
  ["Grenada", "ðŸ‡¬ðŸ‡©"],
  ["Guatemala", "ðŸ‡¬ðŸ‡¹"],
  ["Guinea", "ðŸ‡¬ðŸ‡³"],
  ["Guinea-Bissau", "ðŸ‡¬ðŸ‡¼"],
  ["Guyana", "ðŸ‡¬ðŸ‡¾"],
  ["Haiti", "ðŸ‡­ðŸ‡¹"],
  ["Honduras", "ðŸ‡­ðŸ‡³"],
  ["Hungary", "ðŸ‡­ðŸ‡º"],
  ["Iceland", "ðŸ‡®ðŸ‡¸"],
  ["India", "ðŸ‡®ðŸ‡³"],
  ["Indonesia", "ðŸ‡®ðŸ‡©"],
  ["Iran", "ðŸ‡®ðŸ‡·"],
  ["Iraq", "ðŸ‡®ðŸ‡¶"],
  ["Ireland", "ðŸ‡®ðŸ‡ª"],
  ["Israel", "ðŸ‡®ðŸ‡±"],
  ["Italy", "ðŸ‡®ðŸ‡¹"],
  ["Jamaica", "ðŸ‡¯ðŸ‡²"],
  ["Japan", "ðŸ‡¯ðŸ‡µ"],
  ["Jordan", "ðŸ‡¯ðŸ‡´"],
  ["Kazakhstan", "ðŸ‡°ðŸ‡¿"],
  ["Kenya", "ðŸ‡°ðŸ‡ª"],
  ["Kiribati", "ðŸ‡°ðŸ‡®"],
  ["Kosovo", "ðŸ‡½ðŸ‡°"],
  ["Kuwait", "ðŸ‡°ðŸ‡¼"],
  ["Kyrgyzstan", "ðŸ‡°ðŸ‡¬"],
  ["Laos", "ðŸ‡±ðŸ‡¦"],
  ["Latvia", "ðŸ‡±ðŸ‡»"],
  ["Lebanon", "ðŸ‡±ðŸ‡§"],
  ["Lesotho", "ðŸ‡±ðŸ‡¸"],
  ["Liberia", "ðŸ‡±ðŸ‡·"],
  ["Libya", "ðŸ‡±ðŸ‡¾"],
  ["Liechtenstein", "ðŸ‡±ðŸ‡®"],
  ["Lithuania", "ðŸ‡±ðŸ‡¹"],
  ["Luxembourg", "ðŸ‡±ðŸ‡º"],
  ["Madagascar", "ðŸ‡²ðŸ‡¬"],
  ["Malawi", "ðŸ‡²ðŸ‡¼"],
  ["Malaysia", "ðŸ‡²ðŸ‡¾"],
  ["Maldives", "ðŸ‡²ðŸ‡»"],
  ["Mali", "ðŸ‡²ðŸ‡±"],
  ["Malta", "ðŸ‡²ðŸ‡¹"],
  ["Marshall Islands", "ðŸ‡²ðŸ‡­"],
  ["Mauritania", "ðŸ‡²ðŸ‡·"],
  ["Mauritius", "ðŸ‡²ðŸ‡º"],
  ["Mexico", "ðŸ‡²ðŸ‡½"],
  ["Micronesia", "ðŸ‡«ðŸ‡²"],
  ["Moldova", "ðŸ‡²ðŸ‡©"],
  ["Monaco", "ðŸ‡²ðŸ‡¨"],
  ["Mongolia", "ðŸ‡²ðŸ‡³"],
  ["Montenegro", "ðŸ‡²ðŸ‡ª"],
  ["Morocco", "ðŸ‡²ðŸ‡¦"],
  ["Mozambique", "ðŸ‡²ðŸ‡¿"],
  ["Myanmar", "ðŸ‡²ðŸ‡²"],
  ["Namibia", "ðŸ‡³ðŸ‡¦"],
  ["Nauru", "ðŸ‡³ðŸ‡·"],
  ["Nepal", "ðŸ‡³ðŸ‡µ"],
  ["Netherlands", "ðŸ‡³ðŸ‡±"],
  ["New Caledonia", "ðŸ‡³ðŸ‡¨"],
  ["New Zealand", "ðŸ‡³ðŸ‡¿"],
  ["Nicaragua", "ðŸ‡³ðŸ‡®"],
  ["Niger", "ðŸ‡³ðŸ‡ª"],
  ["Nigeria", "ðŸ‡³ðŸ‡¬"],
  ["North Korea", "ðŸ‡°ðŸ‡µ"],
  ["North Macedonia", "ðŸ‡²ðŸ‡°"],
  ["Norway", "ðŸ‡³ðŸ‡´"],
  ["Oman", "ðŸ‡´ðŸ‡²"],
  ["Pakistan", "ðŸ‡µðŸ‡°"],
  ["Palau", "ðŸ‡µðŸ‡¼"],
  ["Palestine", "ðŸ‡µðŸ‡¸"],
  ["Panama", "ðŸ‡µðŸ‡¦"],
  ["Papua New Guinea", "ðŸ‡µðŸ‡¬"],
  ["Paraguay", "ðŸ‡µðŸ‡¾"],
  ["Peru", "ðŸ‡µðŸ‡ª"],
  ["Philippines", "ðŸ‡µðŸ‡­"],
  ["Poland", "ðŸ‡µðŸ‡±"],
  ["Portugal", "ðŸ‡µðŸ‡¹"],
  ["Puerto Rico", "ðŸ‡µðŸ‡·"],
  ["Qatar", "ðŸ‡¶ðŸ‡¦"],
  ["Romania", "ðŸ‡·ðŸ‡´"],
  ["Russia", "ðŸ‡·ðŸ‡º"],
  ["Rwanda", "ðŸ‡·ðŸ‡¼"],
  ["Saint Kitts and Nevis", "ðŸ‡°ðŸ‡³"],
  ["Saint Lucia", "ðŸ‡±ðŸ‡¨"],
  ["Saint Vincent and the Grenadines", "ðŸ‡»ðŸ‡¨"],
  ["Samoa", "ðŸ‡¼ðŸ‡¸"],
  ["San Marino", "ðŸ‡¸ðŸ‡²"],
  ["Sao Tome and Principe", "ðŸ‡¸ðŸ‡¹"],
  ["Saudi Arabia", "ðŸ‡¸ðŸ‡¦"],
  ["Senegal", "ðŸ‡¸ðŸ‡³"],
  ["Serbia", "ðŸ‡·ðŸ‡¸"],
  ["Seychelles", "ðŸ‡¸ðŸ‡¨"],
  ["Sierra Leone", "ðŸ‡¸ðŸ‡±"],
  ["Singapore", "ðŸ‡¸ðŸ‡¬"],
  ["Slovakia", "ðŸ‡¸ðŸ‡°"],
  ["Slovenia", "ðŸ‡¸ðŸ‡®"],
  ["Solomon Islands", "ðŸ‡¸ðŸ‡§"],
  ["Somalia", "ðŸ‡¸ðŸ‡´"],
  ["South Africa", "ðŸ‡¿ðŸ‡¦"],
  ["South Korea", "ðŸ‡°ðŸ‡·"],
  ["South Sudan", "ðŸ‡¸ðŸ‡¸"],
  ["Spain", "ðŸ‡ªðŸ‡¸"],
  ["Sri Lanka", "ðŸ‡±ðŸ‡°"],
  ["Sudan", "ðŸ‡¸ðŸ‡©"],
  ["Suriname", "ðŸ‡¸ðŸ‡·"],
  ["Sweden", "ðŸ‡¸ðŸ‡ª"],
  ["Switzerland", "ðŸ‡¨ðŸ‡­"],
  ["Syria", "ðŸ‡¸ðŸ‡¾"],
  ["Taiwan", "ðŸ‡¹ðŸ‡¼"],
  ["Tajikistan", "ðŸ‡¹ðŸ‡¯"],
  ["Tanzania", "ðŸ‡¹ðŸ‡¿"],
  ["Thailand", "ðŸ‡¹ðŸ‡­"],
  ["Timor", "ðŸ‡¹ðŸ‡±"],
  ["Togo", "ðŸ‡¹ðŸ‡¬"],
  ["Tonga", "ðŸ‡¹ðŸ‡´"],
  ["Trinidad and Tobago", "ðŸ‡¹ðŸ‡¹"],
  ["Tunisia", "ðŸ‡¹ðŸ‡³"],
  ["Turkey", "ðŸ‡¹ðŸ‡·"],
  ["Turkmenistan", "ðŸ‡¹ðŸ‡²"],
  ["Tuvalu", "ðŸ‡¹ðŸ‡»"],
  ["Uganda", "ðŸ‡ºðŸ‡¬"],
  ["Ukraine", "ðŸ‡ºðŸ‡¦"],
  ["United Arab Emirates", "ðŸ‡¦ðŸ‡ª"],
  ["United Kingdom", "ðŸ‡¬ðŸ‡§"],
  ["United States", "ðŸ‡ºðŸ‡¸"],
  ["Uruguay", "ðŸ‡ºðŸ‡¾"],
  ["Uzbekistan", "ðŸ‡ºðŸ‡¿"],
  ["Vanuatu", "ðŸ‡»ðŸ‡º"],
  ["Venezuela", "ðŸ‡»ðŸ‡ª"],
  ["Vietnam", "ðŸ‡»ðŸ‡³"],
  ["Western Sahara", "ðŸ‡ªðŸ‡­"],
  ["Yemen", "ðŸ‡¾ðŸ‡ª"],
  ["Zambia", "ðŸ‡¿ðŸ‡²"],
  ["Zimbabwe", "ðŸ‡¿ðŸ‡¼"],
];

const ShufflePopup = ({ isVisible, singleMode }) => {
  const [currentFlags, setCurrentFlags] = useState([]);

  useEffect(() => {
    let intervalId;

    if (isVisible) {
      intervalId = setInterval(() => {
        const randomFlags = [];
        for (let i = 0; i < 2; i++) {
          const randomIndex = Math.floor(Math.random() * countryEmojis.length);
          randomFlags.push(countryEmojis[randomIndex][1]);
        }
        setCurrentFlags(randomFlags);
      }, 100);
    }

    return () => {
      clearInterval(intervalId);
    };
  }, [isVisible]);

  if (!isVisible) {
    return null;
  }

  return (
    <div className="fixed top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 text-6xl z-50 bg-white shadow-2xl border-2 rounded-lg">
      <span className=" drop-shadow-sm">{currentFlags[0]}</span>

      {!singleMode && (
        <span className=" drop-shadow-sm">{currentFlags[1]}</span>
      )}
    </div>
  );
};


const MAX_RECENT = 10; // Number of recent countries to keep track of

const ShuffleCountries = ({ singleMode = false }) => {
  const setCountryPhase = useCountryStore((state) => state.setCountryPhase);
  const resetAllExcept = useCountryStore((state) => state.resetAllExcept);
  const [countries, setCountries] = useState({});
  const [isPopupVisible, setIsPopupVisible] = useState(false);
  const [recentCountries, setRecentCountries] = useState([]); // Track recent selections to improve feeling of randomness
  const [isShuffling, setIsShuffling] = useState(false);

  const gdpFilter = singleMode ? 5000 : 50000;
  const populationFilter = singleMode ? 500000 : 5000000;
  
  useEffect(() => {
    const fetchCountries = async () => {
      const response = await fetch("/demographics.json");
      const data = await response.json();
      const filteredCountries = data.filter(
        (country) =>
          country.GDP >= gdpFilter && country.Population >= populationFilter
      );
      const countriesDict = filteredCountries.reduce((acc, country) => {
        acc[country.Country] = { ...country, phase: 0 };
        return acc;
      }, {});
      setCountries(countriesDict);
    };

    fetchCountries();
  }, []);

  const updateRecentCountries = (newCountry) => {
    setRecentCountries((prev) => {
      const updatedList = [newCountry, ...prev];
      if (updatedList.length > MAX_RECENT) {
        updatedList.pop(); // Remove the oldest country to maintain the list size
      }
      return updatedList;
    });
  };

  const shuffleCountries = () => {
    if (isShuffling) return; 
    setIsShuffling(true);

    if (singleMode) {
      resetAllExcept();
    }
    const availableCountries = Object.entries(countries)
      .filter(([name, country]) => country.phase === 0 && !recentCountries.includes(name))
      .map(([name]) => name);

  

    const randomIndex1 = Math.floor(Math.random() * availableCountries.length);
    const randomIndex2 = Math.floor(Math.random() * availableCountries.length);
    const country1 = availableCountries[randomIndex1];
    let country2 = availableCountries[randomIndex2];

    while (country2 === country1) {
      country2 =
        availableCountries[
          Math.floor(Math.random() * availableCountries.length)
        ];
    }

    setIsPopupVisible(true);

    setTimeout(() => {
      setIsPopupVisible(false);
      setCountryPhase(country1, 2);
      updateRecentCountries(country1); // Update the recent list with the first country

      if (!singleMode) {
        setCountryPhase(country2, 3);
        updateRecentCountries(country2); // Update the recent list with the second country
      }
      setIsShuffling(false);
    }, 900);
  };


  return singleMode ? (
    <div className = "grid grid-cols-2 bg-red-500 w-full mx-4">
      <button className="col-span-2 flex h-full w-full rounded text-primary-foreground bg-primary shadow  p-1 text-center items-center justify-center ring-2 ring-yellow-400 " onClick={shuffleCountries}>
        <IconArrowsShuffle size={28} className="mr-2" /> <p className="font-medium text-sm lg:text-base">Random </p>
      </button>
      <ShufflePopup isVisible={isPopupVisible} singleMode={singleMode} />
    </div>
  ) : (
    <div className="rounded text-primary-foreground active:shadow-sm">
      <IconButton
        icon={IconArrowsShuffle}
        size="medium"
        onClick={shuffleCountries}
      />
      <ShufflePopup isVisible={isPopupVisible} singleMode={singleMode} />
    </div>
  );
};

export default ShuffleCountries;

